diff --git a/node_modules/jsii/lib/transforms/deprecation-warnings.js b/node_modules/jsii/lib/transforms/deprecation-warnings.js
index 07c0e01ee..253419d43 100644
--- a/node_modules/jsii/lib/transforms/deprecation-warnings.js
+++ b/node_modules/jsii/lib/transforms/deprecation-warnings.js
@@ -21,7 +21,7 @@
         };
     }
     process(assembly, projectInfo) {
-        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
+        var _a, _b, _c, _d, _e, _f;
         const projectRoot = projectInfo.projectRoot;
         const functionDeclarations = [];
         const types = (_a = assembly.types) !== null && _a !== void 0 ? _a : {};
@@ -48,46 +48,12 @@
                 }
             }
             else if (spec.isInterfaceType(type) && type.datatype) {
-                for (const prop of Object.values((_g = type.properties) !== null && _g !== void 0 ? _g : {})) {
-                    if (spec.isDeprecated(prop) || spec.isDeprecated(type)) {
-                        // If the property individually is deprecated, or the entire type is deprecated
-                        const deprecatedDocs = (_j = (_h = prop.docs) === null || _h === void 0 ? void 0 : _h.deprecated) !== null && _j !== void 0 ? _j : (_k = type.docs) === null || _k === void 0 ? void 0 : _k.deprecated;
-                        statements.push(createWarningFunctionCall(`${type.fqn}#${prop.name}`, deprecatedDocs, ts.createIdentifier(`"${prop.name}" in ${PARAMETER_NAME}`)));
+                const { statementsByProp, excludedProps } = processInterfaceType(type, types, assembly, projectInfo);
+                for (const [name, statement] of statementsByProp.entries()) {
+                    if (!excludedProps.has(name)) {
+                        statements.push(statement);
                         isEmpty = false;
                     }
-                    if (spec.isNamedTypeReference(prop.type) &&
-                        Object.keys(types).includes(prop.type.fqn)) {
-                        const functionName = importedFunctionName(prop.type.fqn, assembly, projectInfo);
-                        if (functionName) {
-                            statements.push(createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`));
-                            isEmpty = false;
-                        }
-                    }
-                    else if (spec.isCollectionTypeReference(prop.type) &&
-                        spec.isNamedTypeReference(prop.type.collection.elementtype)) {
-                        const functionName = importedFunctionName(prop.type.collection.elementtype.fqn, assembly, projectInfo);
-                        if (functionName) {
-                            statements.push(createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`));
-                            isEmpty = false;
-                        }
-                    }
-                    else if (spec.isUnionTypeReference(prop.type) &&
-                        spec.isNamedTypeReference(prop.type.union.types[0]) &&
-                        Object.keys(types).includes(prop.type.union.types[0].fqn)) {
-                        const functionName = importedFunctionName(prop.type.union.types[0].fqn, assembly, projectInfo);
-                        if (functionName) {
-                            statements.push(createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`));
-                            isEmpty = false;
-                        }
-                    }
-                    // We also generate calls to all the supertypes
-                    for (const iface of (_l = type.interfaces) !== null && _l !== void 0 ? _l : []) {
-                        const functionName = importedFunctionName(iface, assembly, projectInfo);
-                        if (functionName) {
-                            statements.push(ts.createExpressionStatement(ts.createCall(ts.createIdentifier(functionName), [], [ts.createIdentifier(PARAMETER_NAME)])));
-                            isEmpty = false;
-                        }
-                    }
                 }
             }
             statements.push(ts.createExpressionStatement(ts.createCall(ts.createIdentifier(`${VISITED_OBJECTS_SET_NAME}.delete`), [], [ts.createIdentifier(PARAMETER_NAME)])));
@@ -122,6 +88,58 @@
     }
 }
 exports.DeprecationWarningsInjector = DeprecationWarningsInjector;
+function processInterfaceType(type, types, assembly, projectInfo, statementsByProp = new Map(), excludedProps = new Set()) {
+    var _a, _b, _c, _d, _e;
+    for (const prop of Object.values((_a = type.properties) !== null && _a !== void 0 ? _a : {})) {
+        const fqn = `${type.fqn}#${prop.name}`;
+        if (spec.isDeprecated(prop) || spec.isDeprecated(type)) {
+            // If the property individually is deprecated, or the entire type is deprecated
+            const deprecatedDocs = (_c = (_b = prop.docs) === null || _b === void 0 ? void 0 : _b.deprecated) !== null && _c !== void 0 ? _c : (_d = type.docs) === null || _d === void 0 ? void 0 : _d.deprecated;
+            const statement = createWarningFunctionCall(fqn, deprecatedDocs, ts.createIdentifier(`"${prop.name}" in ${PARAMETER_NAME}`));
+            statementsByProp.set(prop.name, statement);
+        }
+        else {
+            /* If a prop is not deprecated, we don't want to generate a warning for it,
+               even if another property with the same name is deprecated in another
+               super-interface. */
+            excludedProps.add(prop.name);
+        }
+        if (spec.isNamedTypeReference(prop.type) &&
+            Object.keys(types).includes(prop.type.fqn)) {
+            const functionName = importedFunctionName(prop.type.fqn, assembly, projectInfo);
+            if (functionName) {
+                const statement = createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`);
+                statementsByProp.set(`${prop.name}_`, statement);
+            }
+        }
+        else if (spec.isCollectionTypeReference(prop.type) &&
+            spec.isNamedTypeReference(prop.type.collection.elementtype)) {
+            const functionName = importedFunctionName(prop.type.collection.elementtype.fqn, assembly, projectInfo);
+            if (functionName) {
+                const statement = createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`);
+                statementsByProp.set(`${prop.name}_`, statement);
+            }
+        }
+        else if (spec.isUnionTypeReference(prop.type) &&
+            spec.isNamedTypeReference(prop.type.union.types[0]) &&
+            Object.keys(types).includes(prop.type.union.types[0].fqn)) {
+            const functionName = importedFunctionName(prop.type.union.types[0].fqn, assembly, projectInfo);
+            if (functionName) {
+                const statement = createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`);
+                statementsByProp.set(`${prop.name}_`, statement);
+            }
+        }
+    }
+    // We also generate calls to all the supertypes
+    for (const interfaceName of (_e = type.interfaces) !== null && _e !== void 0 ? _e : []) {
+        const assemblies = projectInfo.dependencyClosure.concat(assembly);
+        const superType = findType(interfaceName, assemblies);
+        if (superType.type) {
+            processInterfaceType(superType.type, types, assembly, projectInfo, statementsByProp, excludedProps);
+        }
+    }
+    return { statementsByProp, excludedProps };
+}
 function fnName(fqn) {
     return fqn.replace(/[^\w\d]/g, '_');
 }
@@ -372,4 +390,4 @@
     }
     return filePath;
 }
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
